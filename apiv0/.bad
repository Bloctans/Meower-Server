from hashlib import sha1

class Utils:
    def __init__(self, meower, request):
        self.meower = meower
        self.request = request

        # OAuth scopes
        self.all_oauth_scopes = set([
            "foundation:profile:view_profile",
            "foundation:settings:read_email",
            "foundation:settings:read_config",
            "foundation:settings:edit_config",
            "foundation:inbox:read_messages",
            "meower:websocket:connect",
            "meower:chats:access",
            "meower:chats:edit",
            "meower:posts:read_posts",
            "meower:posts:create_posts",
            "meower:posts:edit_posts",
            "meower:posts:comments"
        ])
        self.first_party_oauth_scopes = set([
            "foundation:settings:authentication",
            "foundation:settings:sessions",
            "foundation:settings:blocked",
            "foundation:settings:danger",
            "foundation:oauth:authorized",
            "foundation:oauth:apps"
        ])

    def email_session(self, user, email, action):
        session_data = {
            "_id": self.meower.uid(),
            "user": user,
            "email": email,
            "action": action,
            "token": sha1(secrets.token_urlsafe(64)),
            "expires": {}[action]
        }
        self.meower.db.email_sessions.insert_one(session_data)
        return session_data

    def foundation_session(self, user, impersonation=False):
        """
        Create a foundation session that can be used to authorize OAuth apps.

        user: user ID of session user
        impersonation: whether the session was generated by an admin impersonating
        """

        # Update netlog
        if not impersonation:
            network = self.meower.db.netlog.find_one({"_id": self.request.remote_addr})
            if network is None:
                # Create new netlog
                network = {
                    "_id": self.request.remote_addr,
                    "users": [user],
                    "last_user": user,
                    "blocked": False,
                    "creation_blocked": False
                }
                self.meower.db.netlog.insert_one(network)

            # Make sure the user is logged on the netlog
            if network["last_user"] != user:
                network["last_user"] = user
                if user not in network["users"]:
                    network["users"].append(user)
                self.meower.db.netlog.update_one({"_id": self.request.remote_addr}, {"$set": {"users": network["users"], "last_user": network["last_user"]}})

        # Generate session
        session_data = {
            "_id": self.meower.uid(),
            "user": user,
            "ip": self.request.remote_addr,
            "user_agent": self.request.headers["User-Agent"],
            "token": sha1(secrets.token_urlsafe(32)),
            "refresh": {"current": sha1(secrets.token_urlsafe(128)), "previous": [], "expires": (self.time() + 31556952000)},
            "expires": (self.time() + 86400000),
            "impersonation": impersonation
        }
        self.meower.db.foundation_sessions.insert_one(session_data)
        return session_data

    def oauth_session(self, user, origin_session, app, scopes):
        session_data = {
            "_id": self.meower.uid(),
            "user": user,
            "origin_session": origin_session,
            "app": app,
            "scopes": scopes,
            "token": sha1(secrets.token_urlsafe(32)),
            "refresh": None,
            "expires": (self.time() + 86400000),
            "exchanged": False
        }
        self.meower.db.oauth_sessions.insert_one(session_data)
        return session_data

    def link_session(self, user, provider):
        session_data = {
            "_id": self.meower.uid(),
            "user": user,
            "provider": provider,
            "token": sha1(secrets.token_urlsafe(32)),
            "expires": (self.time() + 600000)
        }
        self.meower.db.link_sessions.insert_one(session_data)
        return session_data

class Session:
    def __init__(self, meower, token):
        self.meower = meower

        # Get session data from database
        token_data = self.meower.db.sessions.find_one({"token": token})
        
        # Check if session is valid
        self.authed = False
        try:
            if (token_data is not None) and (token_data["type"] == 3 or token_data["type"] == 5):
                self.json = token_data
                for key, value in token_data.items():
                    setattr(self, key, value)
                self.user = self.meower.User(self.meower, user_id=self.user)
                if (self.expires == None) or (not (self.expires < self.time())) and (self.user.raw is not None):
                    self.authed = True
        except:
            pass

    def renew(self):
        # Renew session
        self.meower.db.sessions.update_one({"_id": self._id}, {"$set": {"expires": self.time() + self.expires}})
        self.expires = self.time() + self.expires
    
    def delete(self):
        # Delete session
        self.meower.db.sessions.delete_one({"_id": self._id})